{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\script\\framework\\manager/assets\\script\\framework\\manager\\SpineManager.js"],"names":["BaseManager","require","SpineManager","cc","Class","extends","ctor","statics","inited","dirs","common","path","isStatic","fish","hallPreload","isPreload","boss","mainPreload","releaseAfterLoad","mainCommon","mainBg","welcome","skill","bless","unlock","jiangli","bankruptcy","xuanshang","gun","bossPlay","palace","area","match","superWeapon","coolround","init","callback","self","log","info","dir","value","datas","hasOwnProperty","loadDir","progressCallback","completeCallback","config","warn","subDir","loader","loadResDir","sp","SkeletonData","err","objects","error","message","i","releaseObject","name","newData","_load","data","getData","loadRes","object","destroy","node","removeComponent","Skeleton","releaseScene","str","indexOf","releaseDir","release","releaseOne","create","parent","anim","loop","Node","addChild","play","isValid","bRemove","spine","getComponent","addComponent","setSkin","skin","premultipliedAlpha","timeScale","addRefCount","skeletonData","getObject","setAnimation","setCompleteListener","trackEntry","loopCount","animName","animation","removeComp","getRefCount","stop","clearTracks"],"mappings":"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","file":"SpineManager.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\script\\framework\\manager","sourcesContent":["const BaseManager = require('BaseManager');\r\n\r\nlet SpineManager = cc.Class({\r\n    extends: BaseManager,\r\n\r\n    ctor() {\r\n    },\r\n\r\n    statics: {\r\n\r\n        inited: false,\r\n        /**\r\n         * 必需参数 path: 资源相对路径。\r\n         * 可选参数 isStatic: 是否为全局静态资源(游戏启动时加载，一直保存在内存中)\r\n         * 可选参数 isPreload: 是否需预加载(进入场景时加载，本场景内有效)\r\n         */\r\n        dirs: {\r\n            // 公共\r\n            common: { path: 'spine/common/', isStatic: false },\r\n            fish: { path: 'fish/anim/', isStatic: false },\r\n\r\n            // 大厅\r\n            hallPreload: { path: 'spine/hall/preload/', isPreload: true },\r\n            boss: { path: 'spine/hall/boss/', isPreload: true },\r\n\r\n            // 渔场\r\n            mainPreload: { path: 'spine/mainScene/preload/', isPreload:true, releaseAfterLoad:true },\r\n            mainCommon: { path: 'spine/mainScene/common/' },\r\n            mainBg: { path: 'spine/mainScene/bg/' },\r\n            welcome: { path: 'spine/mainScene/welcome/' },\r\n            skill: { path: 'spine/mainScene/skill/' },\r\n            bless: { path: 'spine/mainScene/bless/' },\r\n            unlock: { path: 'spine/mainScene/unlock/', isPreload:true, releaseAfterLoad:true },\r\n            jiangli: { path: 'spine/mainScene/jiangli/' },\r\n            bankruptcy: { path: 'spine/mainScene/bankruptcy/' }, // 破产补助\r\n            xuanshang: { path: 'spine/mainScene/xuanshang/' },\r\n            gun: { path: 'spine/mainScene/gun/' },\r\n            bossPlay: { path: 'spine/mainScene/boss/', isPreload:true, releaseAfterLoad:true },    // boss玩法\r\n\r\n            palace: { path: 'spine/mainScene/palace/' },\r\n            area: { path: 'spine/mainScene/area/' },\r\n            match: { path: 'spine/mainScene/match/' },  //话费赛相关\r\n            superWeapon: { path: 'spine/mainScene/superWeapon/' },\r\n            coolround: { path: 'spine/mainScene/coolRound/', isPreload:true, releaseAfterLoad:true },\r\n        \r\n        },\r\n        \r\n        init: function (callback) {\r\n            let self = this;\r\n            if (self.inited) {\r\n                log.info('SpineManager.init: has been called');\r\n            } else {\r\n                self.inited = true;\r\n                for (let dir in this.dirs) {\r\n                    let value = this.dirs[dir];\r\n                    value.datas = {};\r\n                    if (value.hasOwnProperty('isStatic') && value.isStatic === true) {\r\n                        this.loadDir(dir);\r\n                    }\r\n                }\r\n            }\r\n            !!callback && callback();\r\n        },\r\n    \r\n        // 加载一个spine目录\r\n        // progressCallback - 过程中回调，可跳过直接填完成回调\r\n        // config - 可选参数。主要针对鱼资源加载\r\n        loadDir: function (dir, progressCallback, completeCallback, config) {\r\n            if (!dir) {\r\n                log.warn('SpineManager.loadDir: invalid dir.');\r\n                return;\r\n            }\r\n            let value = this.dirs[dir];\r\n            let path = value.path;\r\n            // 如果有子目录则加上\r\n            if (!!config && config.hasOwnProperty('subDir')) {\r\n                path += config.subDir;\r\n            }\r\n            // 加载整个目录\r\n            cc.loader.loadResDir(path, sp.SkeletonData, progressCallback, (err, objects) => {\r\n                if (err) {\r\n                    log.error('SpineManager.loadDir: ' + err || err.message);\r\n                } else {\r\n                    if (value.hasOwnProperty('releaseAfterLoad') && value.releaseAfterLoad) {\r\n                        for (let i in objects) {\r\n                            this.releaseObject(objects[i]);\r\n                        }\r\n                    } else {\r\n                        for (let i in objects) {\r\n                            value.datas[objects[i].name] = this.newData(objects[i], 0);\r\n                        }\r\n                    }\r\n                }\r\n                // 不管成功或失败，都要执行回调\r\n                !!completeCallback && completeCallback();\r\n            });\r\n        },\r\n\r\n        // 加载一个spine文件\r\n        // config - 可选参数\r\n        _load: function (dir, name, callback, config) {\r\n            // 首先查找缓存\r\n            let data = this.getData(this.dirs, dir, name);\r\n            if (data) {\r\n                !!callback && callback(data);\r\n                return;\r\n            }\r\n\r\n            // 缓存中未找到，则执行异步加载\r\n            if (!!config && !!config.subDir) {\r\n                log.info('SpineManager._load: will load subDir={}', config.subDir);\r\n                // 如果定义了子目录，则按目录方式加载，再返回单个对象\r\n                this.loadDir(dir, null, () => {\r\n                    data = this.getData(this.dirs, dir, name);\r\n                    !!callback && callback(data);\r\n                }, config);\r\n            } else {\r\n                // 加载单个Spine对象\r\n                let value = this.dirs[dir];\r\n                let path = value.path + name;\r\n                cc.loader.loadRes(path, sp.SkeletonData, (err, object) => {\r\n                    if (err || !object) {\r\n                        log.error('SpineManager._load: error: ' + err || err.message);\r\n                        return;\r\n                    }\r\n                    \r\n                    data = this.getData(this.dirs, dir, name);\r\n                    if (!data) {\r\n                        data = this.newData(object, 0);\r\n                        value.datas[object.name] = data;\r\n                    }\r\n                    !!callback && callback(data);\r\n                });\r\n            }\r\n        },\r\n\r\n        // 删除一个带有Spine组件的节点\r\n        destroy: function (node) {\r\n            if (!!node) {\r\n                node.removeComponent(sp.Skeleton);\r\n                node.destroy();\r\n            }\r\n        },\r\n\r\n        // 释放指定场景的所有资源\r\n        releaseScene: function (name) {\r\n            let str = '/' + name + '/';\r\n            for (let dir in this.dirs) {\r\n                let value = this.dirs[dir];\r\n                if (value.path.indexOf(str) >= 0) {\r\n                    this.releaseDir(this.dirs, dir);\r\n                }\r\n            }\r\n        },\r\n\r\n        // 释放一项资源\r\n        release(dir, name, config) {\r\n            return this.releaseOne(this.dirs, dir, name, config);\r\n        },\r\n\r\n        // 创建新节点并播放spine动画\r\n        // callback - 可选参数。动画播放完后的回调，其中返回的回调第1个参数是新节点对象\r\n        // config - 可选参数。需要传入的附加选项\r\n        //      release - 是否Spine播放完即释放，默认为true\r\n        create: function (parent, dir, name, anim, loop, callback, config) {\r\n            if (!!parent) {\r\n                let node = new cc.Node();\r\n                parent.addChild(node);\r\n                return this.play(node, dir, name, anim, loop, (object) => {\r\n                    // 回调\r\n                    !!callback && callback(object);\r\n\r\n                    // 播放完成，默认释放临时节点，除非指定不释放\r\n                    if (!config || config.release !== false) {\r\n                        cc.isValid(node, true) && node.destroy();\r\n                    }\r\n                }, config);\r\n            }\r\n        },\r\n\r\n        // 在指定节点上异步加载并播放spine动画\r\n        // node - 播放Spine动画的节点\r\n        // dir - Spine文件所在目录\r\n        // name - Spine文件名\r\n        // anim - Spine文件中要播放的动画名\r\n        // loop - 是否循环\r\n        // callback - 可选参数，播放完成后执行该回调\r\n        // config - 可选参数，可指定Spine的skin等其它选项，目前支持：\r\n        //      skin - skin\r\n        //      premultipliedAlpha - 是否开启预乘\r\n        //      subDir - 子目录名(目前用于鱼资源加载,一条鱼就是一个目录)\r\n        //      release - 播放完是否减引用计数，默认为true\r\n        //      force - 是否强制释放而不管引用计数，默认为flase\r\n        //      removeComp - 播放完是否移除spine组件(仅针对临时添加的)，默认为true\r\n        play: function(node, dir, name, anim, loop, callback, config) {\r\n            if (!node || !dir || !name || !anim) {\r\n                log.warn('SpineManager.play: param is invalid. dir={}, name={}', dir, name);\r\n                return;\r\n            }\r\n\r\n            let bRemove = false;\r\n            let spine = node.getComponent(sp.Skeleton);\r\n            if (!spine) {\r\n                spine = node.addComponent(sp.Skeleton);\r\n                bRemove = true;\r\n            }\r\n\r\n            this._load(dir, name, (data) => {\r\n                // 可选参数\r\n                if (!!config && config.hasOwnProperty('config.skin')) {\r\n                    spine.setSkin(config.skin);\r\n                }\r\n                if (!!config && config.hasOwnProperty('premultipliedAlpha')) {\r\n                    spine.premultipliedAlpha = config.premultipliedAlpha;\r\n                }\r\n                if (!!config && config.hasOwnProperty('timeScale')) {\r\n                    spine.timeScale = config.timeScale;\r\n                }\r\n\r\n                // 增加引用计数\r\n                this.addRefCount(data);\r\n                spine.skeletonData = this.getObject(data);\r\n                spine.setAnimation(0, anim, loop);\r\n                // 如果是循环播放则无需处理回调\r\n                if (loop) {\r\n                    return;\r\n                }\r\n\r\n                spine.setCompleteListener((trackEntry, loopCount) => {\r\n                    spine.setCompleteListener(null);\r\n                    \r\n                    let animName = trackEntry.animation ? trackEntry.animation.name : '';\r\n                    if (animName === anim) {\r\n                        // 回调\r\n                        !!callback && callback(this.getObject(data));\r\n                        \r\n                        // 动画播放完成，默认移除spine组件\r\n                        // 除非指定不移除，或者spine引用计数大于1\r\n                        if (!!config && config.removeComp === true) {\r\n                            cc.isValid(node, true) && node.removeComponent(sp.Skeleton);\r\n                        } else if (bRemove && (!config || config.removeComp !== false) && this.getRefCount(data) <= 1) {\r\n                            cc.isValid(node, true) && node.removeComponent(sp.Skeleton);\r\n                            bRemove = false;\r\n                        }\r\n\r\n                        // 默认spine播放完即减引用计数，除非指定不减\r\n                        if (!config || config.release !== false) {\r\n                            this.release(dir, name, config);\r\n                        }\r\n                    }\r\n                });\r\n                // this._cacheSpineRes(spine, oldData, this._getPath(dir, name));\r\n            }, config);\r\n\r\n        },\r\n\r\n        // 停止指定节点上的Spine动画\r\n        stop: function (node) {\r\n            if (!!node) {\r\n                let spine = node.getComponent(sp.Skeleton);\r\n                if (spine) {\r\n                    spine.clearTracks();\r\n                }\r\n            }\r\n        },\r\n\r\n        // _cacheSpineRes: function (skeleton, data, url) {\r\n        //     let self = this;\r\n        //     if (!self.spineResCache) {\r\n        //         self.spineResCache = {};\r\n        //     }\r\n        //     if (!self.spineResCache[url]) {\r\n        //         self.spineResCache[url] = 1;\r\n        //     } else {\r\n        //         self.spineResCache[url] += 1;\r\n        //     }\r\n\r\n        //     if (skeleton.releaseUrl) {\r\n        //         self._releaseSpineRes(skeleton.releaseUrl, data);\r\n        //     } else {\r\n        //         let oldDestroy = skeleton.onDestroy;\r\n        //         skeleton.onDestroy = function () {\r\n        //             if (oldDestroy) {\r\n        //                 oldDestroy.call(skeleton);\r\n        //             }\r\n        //             self._releaseSpineRes(skeleton.releaseUrl, skeleton.skeletonData);  //场景销毁时内存释放\r\n        //         }\r\n        //     }\r\n        //     skeleton.releaseUrl = url;\r\n        // },\r\n\r\n        // _releaseSpineRes: function (url, data) {\r\n        //     // if (cc.loader.isAutoRelease(data)) return;\r\n        //     if (!this.spineResCache[url]) {\r\n        //         return;\r\n        //     }\r\n        //     this.spineResCache[url] -= 1;\r\n        //     if (this.spineResCache[url] < 1) {\r\n        //         // cc.loader.releaseRes(url, sp.SkeletonData);\r\n        //         let deps = cc.loader.getDependsRecursively(data);\r\n        //         cc.loader.release(deps);\r\n        //         this.spineResCache[url] = 0;\r\n        //     }\r\n        // }\r\n    },\r\n\r\n});"]}