{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\script\\framework\\manager/assets\\script\\framework\\manager\\AnimManager.js"],"names":["AnimManager","inited","dirs","fish","path","isStatic","net","isPreload","reset","init","callback","self","log","info","keys","Object","i","len","length","dir","value","anims","loadDir","progressCallback","completeCallback","config","warn","subDir","cc","loader","loadResDir","AnimationClip","err","objects","error","message","name","play","node","sp","getComponent","Sprite","addComponent","sizeMode","SizeMode","RAW","trim","animCtrl","Animation","_clips","_load","clip","animState","addClip","playAdditive","once","play2","anim","object","getAnim","loadRes","destroy","removeComponent","removeIndex","release","obj","deps","getDependsRecursively","releaseDir","releaseScene","str","indexOf","module","exports"],"mappings":"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","file":"AnimManager.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\script\\framework\\manager","sourcesContent":["\r\n/**\r\n * 全局序列帧Animation管理类\r\n */\r\nlet AnimManager = {\r\n    inited: false,\r\n    /**\r\n     * 必需参数 path: 资源相对路径。\r\n     * 可选参数 isStatic: 是否为全局静态资源(游戏启动时加载，一直保存在内存中)\r\n     * 可选参数 isPreload: 是否需预加载(进入场景时加载，本场景内有效)\r\n     */\r\n    dirs: {\r\n        fish: { path: 'fish/anim/', isStatic: false },\r\n        net: { path: 'anim/clip/mainScene/weapon/', isPreload: true },\r\n    },\r\n\r\n    reset: function () {\r\n\r\n    },\r\n\r\n    init: function (callback) {\r\n        let self = this;\r\n        if (self.inited) {\r\n            log.info('AnimManager.init: has been called');\r\n        } else {\r\n            self.inited = true;\r\n            let keys = Object.keys(this.dirs);\r\n            for (let i = 0, len = keys.length; i < len; i++) {\r\n                let dir = keys[i];\r\n                let value = this.dirs[dir];\r\n                value.anims = {}; // 初始化缓存池\r\n                if (!!value.isStatic && value.isStatic === true) {\r\n                    this.loadDir(dir);\r\n                }\r\n            }\r\n        }\r\n        callback && callback();\r\n    },\r\n\r\n    // 加载一个anim目录\r\n    // dir - 必需参数。要加载的anim文件目录\r\n    // progressCallback - 可选参数。加载过程的回调，可为null\r\n    // completeCallback - 可选参数。加载完成的回调，可为null\r\n    // config - 可选参数。子目录名(目前用于鱼资源加载,一条鱼就是一个目录)\r\n    loadDir: function (dir, progressCallback, completeCallback, config) {\r\n        if (!dir) {\r\n            log.warn('AnimManager.loadDir: invalid dir.');\r\n            return;\r\n        }\r\n        let value = this.dirs[dir];\r\n        let path = value.path;\r\n        // 如果有子目录则加上\r\n        if (!!config && !!config.subDir) {\r\n            path += config.subDir;\r\n        }\r\n        // 加载整个目录\r\n        cc.loader.loadResDir(path, cc.AnimationClip, progressCallback, (err, objects) => {\r\n            if (err) {\r\n                log.error('AnimManager.loadDir: error path: ' + path + ', ' + err || err.message);\r\n            } else {\r\n                // log.info('AnimManager.loadDir: success path: ' +path);\r\n                for (let i in objects) {\r\n                    value.anims[objects[i].name] = objects[i];\r\n                }\r\n            }\r\n            // 不管成功或失败，都要执行回调\r\n            completeCallback && completeCallback();\r\n        });\r\n    },\r\n\r\n    // 在指定node上动态加载并播放一个anim文件\r\n    // dir - 文件目录\r\n    // name - anim名字\r\n    // callback - 可选参数，执行anim播放完后的回调\r\n    // config - 可选参数。子目录名(目前用于鱼资源加载,一条鱼就是一个目录)\r\n    play: function (node, dir, name, callback, config) {\r\n        if (!node || !dir || !name) {\r\n            log.warn('AnimManager.play: invalid params. dir={}, name={}', dir, name);\r\n            return;\r\n        }\r\n        let sp = node.getComponent(cc.Sprite);\r\n        if (!sp) {\r\n            sp = node.addComponent(cc.Sprite);\r\n        }\r\n        sp.sizeMode = cc.Sprite.SizeMode.RAW; // 序列帧动画需使用原始尺寸\r\n        sp.trim = false;\r\n\r\n        let animCtrl = node.getComponent(cc.Animation);\r\n        if (!animCtrl) {\r\n            animCtrl = node.addComponent(cc.Animation);\r\n            animCtrl._clips = [];\r\n        }\r\n\r\n        this._load(dir, name, (clip) => {\r\n            // log.info('AnimManager.play: load: dir={}, name={}', dir, name);\r\n            let animState = animCtrl.addClip(clip);\r\n            if (animState) {\r\n                animState = animCtrl.playAdditive(name);\r\n                if (animState) {\r\n                    // 注册该动画播放结束的回调\r\n                    animCtrl.once('stop', () => {\r\n                        arguments[2] == name && callback && callback(clip);\r\n                    }, this);\r\n                } else {\r\n                    log.warn('AnimManager.play: failed to play. dir={}, name={}', dir, name);\r\n                    return;\r\n                }\r\n            } else {\r\n                log.warn('AnimManager.addClip: failed to add. dir={}, name={}', dir, name);\r\n                return;\r\n            }\r\n        }, config);\r\n    },\r\n\r\n    // 在指定节点上播放一个静态绑定的动画\r\n    // node: 播放动画的节点\r\n    // name：动画名称\r\n    // callback：播放结束后的回调函数。可选参数\r\n    play2: function (node, name, callback) {\r\n        if (!node || !name) {\r\n            log.warn('AnimManager.play2: invalid params. name={}', name);\r\n            return;\r\n        }\r\n        let anim = node.getComponent(cc.Animation);\r\n        if (anim) {\r\n            let animState = anim.playAdditive(name);\r\n            if (animState) {\r\n                // 注册该动画播放结束的回调\r\n                anim.once('stop', () => {\r\n                    arguments[1] == name && callback && callback(); // 执行回调\r\n                }, this);\r\n            } else {\r\n                log.warn('AnimManager.play2: failed to play. name={}', name);\r\n                return;\r\n            }\r\n        }\r\n    },\r\n\r\n    // 加载一个anim文件\r\n    // dir - 文件目录\r\n    // name - anim名字\r\n    // callback - 可选参数，加载anim完成后的回调\r\n    // config - 可选参数。子目录名(目前用于鱼资源加载,一条鱼就是一个目录)\r\n    _load: function (dir, name, callback, config) {\r\n        // 首先查找缓存\r\n        let object = this.getAnim(dir, name);\r\n        if (object) {\r\n            !!callback && callback(object);\r\n            return;\r\n        }\r\n\r\n        // 未找到缓存，将进行异步加载\r\n\r\n        if (!!config && !!config.subDir) {\r\n            log.info('AnimManager._load: will load subDir={}', config.subDir);\r\n            // 如果定义了子目录，则按目录方式加载，再返回单个anim对象\r\n            this.loadDir(dir, null, () => {\r\n                let object = this.getAnim(dir, name);\r\n                callback && callback(object);\r\n            }, config);\r\n        } else {\r\n            // 加载单个anim文件\r\n            let value = this.dirs[dir];\r\n            let path = value.path + name;\r\n            cc.loader.loadRes(path, cc.AnimationClip, (err, object) => {\r\n                if (err || !object) {\r\n                    log.error('AnimManager._load: error path: ' + path + ', ' + err || err.message);\r\n                    return;\r\n                }\r\n                // 设置场景切换时自动释放该anim和它引用的贴图资源\r\n                // cc.loader.setAutoReleaseRecursively(object, true);\r\n                value.anims[object.name] = object; // 加载成功，置缓存\r\n                !!callback && callback(object);\r\n            });\r\n        }\r\n    },\r\n\r\n    getAnim: function (dir, name) {\r\n        let value = this.dirs[dir];\r\n        if (!!value && !!value.anims && value.anims[name]) {\r\n            return value.anims[name];\r\n        }\r\n        return null;\r\n    },\r\n\r\n    // 删除一个带有Animation组件的节点\r\n    destroy: function (node) {\r\n        if (!!node) {\r\n            node.removeComponent(cc.Animation);\r\n            node.destroy();\r\n        }\r\n    },\r\n\r\n    // 删除一个缓存索引\r\n    removeIndex: function (dir, name) {\r\n        let value = this.dirs[dir];\r\n        if (!!value && !!value.anims && value.anims[name]) {\r\n            delete value.anims[name];\r\n        }\r\n    },\r\n\r\n    // 释放一个Anim资源\r\n    release: function (dir, name) {\r\n        let obj = this.getAnim(dir, name);\r\n        if (obj) {\r\n            this.removeIndex(dir, name);\r\n            let deps = cc.loader.getDependsRecursively(obj);\r\n            if (deps) {\r\n                cc.loader.release(deps);\r\n                // log.info('AnimManager.release: dir={}, name={}', dir, name);\r\n            }\r\n        }\r\n    },\r\n\r\n    // 释放整个目录下的资源(包括索引缓存和实际引用资源)\r\n    releaseDir: function (dir) {\r\n        let value = this.dirs[dir];\r\n        if (value && !!value.anims) {\r\n            for (let i in value.anims) {\r\n                this.release(dir, i);\r\n            }\r\n            value.anims = {};\r\n        }\r\n    },\r\n\r\n    // 释放指定场景的所有资源\r\n    releaseScene: function (name) {\r\n        let str = '/' + name + '/';\r\n        let keys = Object.keys(this.dirs);\r\n        for (let i = 0, len = keys.length; i < len; i++) {\r\n            let dir = keys[i];\r\n            let value = this.dirs[dir];\r\n            if (value.path.indexOf(str) >= 0) {\r\n                this.releaseDir(dir);\r\n            }\r\n        }\r\n    },\r\n\r\n}\r\n\r\nmodule.exports = AnimManager;\r\n"]}