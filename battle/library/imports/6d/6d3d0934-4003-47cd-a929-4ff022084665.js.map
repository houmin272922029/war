{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\script\\framework\\utils/assets\\script\\framework\\utils\\SpriteHook.js"],"names":["SpriteHook","init","callback","renderEngine","cc","renderer","SpriteMaterial","GraySpriteMaterial","STATE_CUSTOM","Sprite","prototype","getMaterial","name","_materials","undefined","setMaterial","mat","activateMaterial","_currMaterial","node","color","spriteFrame","texture","getTexture","_renderFlag","RenderFlow","FLAG_COLOR","_state","_activateMaterial","console","error","getCurrMaterial","_spriteFrame","game","renderType","RENDER_TYPE_CANVAS","material","State","GRAY","_graySpriteMaterial","_spriteMaterial","textureLoaded","_updateMaterial","_material","_renderData","markForUpdateRenderData","markForRender","disableRender","Node","useShader","param","sp","getComponent","CustomMaterial","require","resetShader","Color","fromHEX","log","update","flipY","setState","NORMAL","lib","addShader","module","exports"],"mappings":"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","file":"SpriteHook.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\script\\framework\\utils","sourcesContent":["var SpriteHook = {\r\n}\r\n\r\nSpriteHook.init = function (callback) {\r\n    // 支持自定义Shader\r\n    const renderEngine = cc.renderer.renderEngine;\r\n    const SpriteMaterial = renderEngine.SpriteMaterial;\r\n    const GraySpriteMaterial = renderEngine.GraySpriteMaterial;\r\n    const STATE_CUSTOM = 101;\r\n\r\n    // 取自定义材质\r\n    cc.Sprite.prototype.getMaterial = function (name) {\r\n        if (this._materials) {\r\n            return this._materials[name];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    // 设置自定义材质\r\n    cc.Sprite.prototype.setMaterial = function (name, mat) {\r\n        if (!this._materials) {\r\n            this._materials = {}\r\n        }\r\n        this._materials[name] = mat;\r\n    }\r\n\r\n    // 激活某个材质\r\n    cc.Sprite.prototype.activateMaterial = function (name) {\r\n        var mat = this.getMaterial(name);\r\n        if (mat && mat !== this._currMaterial) {\r\n            if (mat) {\r\n                if (this.node) {\r\n                    mat.color = this.node.color;\r\n                }\r\n                if (this.spriteFrame) {\r\n                    mat.texture = this.spriteFrame.getTexture();\r\n                }\r\n                this.node._renderFlag |= cc.RenderFlow.FLAG_COLOR;\r\n                this._currMaterial = mat;\r\n                this._currMaterial.name = name;\r\n                this._state = STATE_CUSTOM;\r\n                this._activateMaterial();\r\n            } else {\r\n                console.error(\"activateMaterial - unknwon material: \", name);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 取当前的材质\r\n    cc.Sprite.prototype.getCurrMaterial = function () {\r\n        if (this._state === STATE_CUSTOM) {\r\n            return this._currMaterial;\r\n        }\r\n    }\r\n\r\n    cc.Sprite.prototype._activateMaterial = function () {\r\n        let spriteFrame = this._spriteFrame;\r\n\r\n        // WebGL\r\n        if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {\r\n            // Get material\r\n            let material;\r\n            if (this._state === cc.Sprite.State.GRAY) {\r\n                if (!this._graySpriteMaterial) {\r\n                    this._graySpriteMaterial = new GraySpriteMaterial();\r\n                    this.node._renderFlag |= cc.RenderFlow.FLAG_COLOR;\r\n                }\r\n                material = this._graySpriteMaterial;\r\n                this._currMaterial = null;\r\n            }\r\n            else if (this._state === STATE_CUSTOM) {\r\n                if (!this._currMaterial) {\r\n                    console.error(\"_activateMaterial: _currMaterial undefined!\")\r\n                    return;\r\n                }\r\n                material = this._currMaterial;\r\n            }\r\n            else {\r\n                if (!this._spriteMaterial) {\r\n                    this._spriteMaterial = new SpriteMaterial();\r\n                    this.node._renderFlag |= cc.RenderFlow.FLAG_COLOR;\r\n                }\r\n                material = this._spriteMaterial;\r\n                this._currMaterial = null;\r\n            }\r\n            // Set texture\r\n            if (spriteFrame && spriteFrame.textureLoaded()) {\r\n                let texture = spriteFrame.getTexture();\r\n                if (material.texture !== texture) {\r\n                    material.texture = texture;\r\n                    this._updateMaterial(material);\r\n                }\r\n                else if (material !== this._material) {\r\n                    this._updateMaterial(material);\r\n                }\r\n                if (this._renderData) {\r\n                    this._renderData.material = material;\r\n                }\r\n                this.markForUpdateRenderData(true);\r\n                this.markForRender(true);\r\n            }\r\n            else {\r\n                this.disableRender();\r\n            }\r\n        }\r\n    }\r\n\r\n    //extentions\r\n    cc.Node.prototype.useShader = function (name, param) {\r\n        let sp = this.getComponent(cc.Sprite);\r\n        if (!sp) {\r\n           // log.error('there is no sprite to use Shader!');\r\n            return;\r\n        }\r\n        let mat = sp.getMaterial(name);\r\n        if (!mat) {\r\n            var CustomMaterial = require(\"CustomMaterial\");\r\n            mat = new CustomMaterial(name, param);\r\n            sp.setMaterial(name, mat);\r\n        }\r\n        sp.activateMaterial(name);\r\n        return mat;\r\n    }\r\n    // 重置\r\n    cc.Node.prototype.resetShader = function () {\r\n        this.color = new cc.Color().fromHEX('#FFFFFF');\r\n        let sp = this.getComponent(cc.Sprite);\r\n        if (!sp) {\r\n            log.error('there is no sprite to reset Shader!');\r\n            return;\r\n        }\r\n        sp.spriteFrame.getTexture().update({ flipY: false });\r\n        sp.setState(cc.Sprite.State.NORMAL);\r\n    }\r\n\r\n\r\n    let lib = require('ShaderLib');\r\n    lib.addShader(require('OverlayShader'));\r\n    if (callback) callback();\r\n}\r\n\r\nmodule.exports = SpriteHook;"]}