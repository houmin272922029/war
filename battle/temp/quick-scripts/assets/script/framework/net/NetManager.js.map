{"version":3,"sources":["NetManager.js"],"names":["AudioManager","require","Global","NetManager","init","callBack","NetCore","cc","game","on","EVENT_SHOW","log","info","resumeMusicEffect","gameHide","EventManager","dispatchEvent","EVENT_HIDE","sendMessage","msgId","pbData","status","sendMessageLimit","genProto","data","proto","Protobuf","getProtoClassByID","protoFile","messageName","msg","key","value","callStr","toLowerCase","substring","toUpperCase","Object","Array","arr","arr1","i","push","error","type","serializeBinary","getGameServerAddress","connectToGameServer","url","Connect","onConnected","onMessageIn","onConnectError","onConnectClosed","onReconnectFailed","getContentStatus","contentStatus","socketReadyState","readyState","disConnect","reconnnet","ReconnectTimes","ReconnectMaxTimes","Reconnect","getIsReconnect","isReconnect","clearReconnectStatus","initMessageLimit","blackList","messageCodes","bdata","Date","now","time","addToBlackList","removeFromBlackList","Data","PBDispatcher","isCallFuncExist","Id","deserializeBinary","dispatchMessage","module","exports"],"mappings":"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","file":"NetManager.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\script\\framework\\net","sourcesContent":["'use strict';\r\n\r\nconst AudioManager = require('AudioManager');\r\nconst Global = require('Global');\r\nvar NetManager = {};\r\n\r\n/**\r\n * 初始化网络相关\r\n */\r\nNetManager.init = function (callBack) {\r\n\r\n    NetCore.init(function () {\r\n        cc.game.on(cc.game.EVENT_SHOW, function () {\r\n            log.info('cc.game.EVENT_SHOW');    //切出后台\r\n            AudioManager.resumeMusicEffect();\r\n            Global.gameHide = false; \r\n            game.EventManager.dispatchEvent('GAME_RESUME');\r\n        });\r\n        cc.game.on(cc.game.EVENT_HIDE, function () {\r\n            log.info('cc.game.EVENT_HIDE');    //切入后台\r\n            Global.gameHide = true;\r\n            game.EventManager.dispatchEvent('GAME_PAUSE');\r\n        });\r\n        if (!!callBack) {\r\n            callBack();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 发送消息\r\n * @param {*消息头} msgId\r\n * @param {*消息体   例如(CSLogin)：{type: 1, account : 'login account'}} data\r\n */\r\n/*\r\nNetManager.sendMessage = function (msgId, data) {\r\n    var proto = game.Protobuf.getProtoClassByID(msgId);\r\n    if (!proto) {\r\n        log.error('can not find proto by id = {}, messageData = {}', msgId, data);\r\n    } else {\r\n        var msg = new proto();\r\n        for (var key in data) {\r\n            var value = data[key];\r\n            var callStr = 'set';\r\n            // 首字母大写\r\n            key = key.toLowerCase();\r\n            key = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n            callStr += key;\r\n            if (value instanceof Array) {\r\n                callStr += 'List';\r\n            }\r\n            if (typeof msg[callStr] == 'function') {\r\n                msg[callStr](value);\r\n            } else {\r\n                log.error('can not find caller {} in {}', callStr, proto.type);\r\n                return;\r\n            }\r\n        }\r\n        log.info('NetManager sendMessage = {}, {}', msgId, msg);\r\n        NetCore.sendMessage(msgId, msg.serializeBinary());\r\n    }\r\n};\r\n*/\r\nNetManager.sendMessage = function (msgId, pbData) {\r\n    let status = NetManager.sendMessageLimit(msgId);\r\n    if (status) {\r\n        return;\r\n    }\r\n    var genProto = function (data) {\r\n        var proto = null;\r\n        if (!!data.msgId) {// 通过协议号查找消息\r\n            proto = game.Protobuf.getProtoClassByID(data.msgId);\r\n        }\r\n        else {// 通过协议名称查找消息\r\n             proto = require(data.protoFile)[data.messageName];\r\n            // var msgName = data.messageName;\r\n            // var profile = require(data.protoFile);\r\n            // proto = profile.msgName;\r\n        }\r\n        if (!!proto) {\r\n            var msg = new proto();\r\n            for (var key in data) {\r\n                if (key == 'msgId') continue;\r\n                if (key == 'protoFile') continue;\r\n                if (key == 'messageName') continue;\r\n\r\n                var value = data[key];\r\n                var callStr = 'set';\r\n                // 首字母大写\r\n                key = key.toLowerCase();\r\n                key = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n                callStr += key;\r\n                if (value instanceof Object) {\r\n                    if (value instanceof Array) {\r\n                        callStr += 'List';\r\n                        if (value[0] instanceof Object) {\r\n                            var arr = [];\r\n                            var arr1 = [];\r\n                            for (let i in value) {\r\n                                arr.push(genProto(value[i]));\r\n                            }\r\n                            value = arr;\r\n                        }\r\n                    } else {\r\n                        // 子协议递归\r\n                        value = genProto(value);\r\n                    }\r\n                }\r\n                if (typeof msg[callStr] == 'function') {\r\n                    msg[callStr](value);\r\n                } else {\r\n                    log.error('can not find caller {} in {}', callStr, proto.type);\r\n                    return null;\r\n                }\r\n            }\r\n            return msg;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    pbData.msgId = msgId;\r\n    var msg = genProto(pbData);\r\n    if (!!msg) {\r\n        NetCore.sendMessage(msgId, msg.serializeBinary());\r\n        // require('UIWaiting').show();\r\n    }\r\n    else {\r\n        log.error('gen message failed! msgId = {}, data = {}', msgId, pbData);\r\n    }\r\n};\r\n\r\n/**\r\n * 获取服务器地址\r\n */\r\nNetManager.getGameServerAddress = function () { };\r\n\r\n/**\r\n * 连接至服务器\r\n */\r\nNetManager.connectToGameServer = function (url) {\r\n    log.info(\"create socket long_connect\");\r\n    NetCore.Connect(url, onConnected, onMessageIn, onConnectError, onConnectClosed, onReconnectFailed);\r\n};\r\n\r\n//获得连接状态\r\nNetManager.getContentStatus = function(){\r\n    let status = 'close';\r\n    if (NetCore.contentStatus === -1) {\r\n        status = 'close';\r\n    } else if(NetCore.contentStatus === 0) {\r\n        status = 'connecting';\r\n    } else {\r\n        status = 'connected';\r\n    }\r\n    return status;\r\n};\r\n\r\nNetManager.socketReadyState = function() {\r\n    return NetCore.readyState();\r\n};\r\n\r\n//断开连接\r\nNetManager.disConnect = function(){\r\n    NetCore.disConnect();\r\n};\r\n\r\n//重连\r\nNetManager.reconnnet = function(){\r\n    NetCore.disConnect();\r\n    NetCore.ReconnectTimes = NetCore.ReconnectMaxTimes; // 设置重连次数\r\n    NetCore.Reconnect();\r\n};\r\n//获得是否是断线重连上的\r\nNetManager.getIsReconnect = function(){\r\n    return NetCore.isReconnect;\r\n};\r\n\r\n//获得是否是断线重连上的\r\nNetManager.clearReconnectStatus = function(){\r\n    NetCore.isReconnect = false;\r\n};\r\n\r\n//初始化发消息时间限制数据\r\nNetManager.initMessageLimit = function(){\r\n    NetManager.blackList = {};\r\n    NetManager.messageCodes = {};\r\n};\r\n\r\n//发送消息限制\r\nNetManager.sendMessageLimit = function(msgId){\r\n    //在黑名单中不限制\r\n    if (msgId in NetManager.blackList) {\r\n        return false;\r\n    }\r\n    let bdata = NetManager.messageCodes[msgId];\r\n    if (!!bdata) {\r\n        if (Date.now() - bdata.time < 500 ) {\r\n            cc.log(msgId,'点击太快了，请稍后',Date.now() - bdata.time,Date.now(),bdata.time);\r\n            return true;\r\n        }\r\n    } else {\r\n        bdata = {time:0}\r\n        NetManager.messageCodes[msgId] = bdata;\r\n    }\r\n    bdata.time = Date.now();\r\n    // cc.log(msgId,'点击太快了，请稍后11111',Date.now() - bdata.time,Date.now(),bdata.time);\r\n    return false;\r\n};\r\n\r\n\r\n\r\n//添加的消息发送的黑名单\r\nNetManager.addToBlackList = function(msgId){\r\n    if (!!NetManager.blackList) {\r\n        NetManager.blackList[msgId] = true;\r\n    } else {\r\n        NetManager.blackList = {};\r\n        NetManager.blackList[msgId] = true;\r\n    }\r\n};\r\n\r\n//从黑名单中删除\r\nNetManager.removeFromBlackList = function(msgId){\r\n    if (!!NetManager.blackList) {\r\n        if (!!NetManager.blackList[msgId]) {\r\n            delete NetManager.blackList[msgId];\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n/**\r\n * 网络连接成功处理\r\n * @param {*message} msg\r\n */\r\nfunction onConnected(msg) {\r\n    // 断线重连\r\n    // if ('' != LoginData.account) {\r\n    //     NetManager.sendMessage(game.Protobuf.CSLogin.index, { account: LoginData.account });\r\n    // }\r\n    game.EventManager.dispatchEvent('SOCKET_CONNECTED');\r\n};\r\n\r\n/**\r\n * 网络消息监听\r\n * @param {*message} msg\r\n */\r\nfunction onMessageIn(msg) {\r\n    if (!!msg.Data) {\r\n        //log.info('receivedMsg.Data.length = {}, id = {}', msg.Data.length, msg.Id);\r\n    }\r\n    if (PBDispatcher.isCallFuncExist(msg.Id)) {\r\n        var proto = game.Protobuf.getProtoClassByID(msg.Id);\r\n        if (!proto) {\r\n            log.error('onMessageIn protobuf error, protobuf is null!');\r\n        }\r\n        var data = proto.deserializeBinary(msg.Data);\r\n        //log.info('NetManager.onMessageIn {}', proto.type);\r\n        PBDispatcher.dispatchMessage(msg.Id, data);\r\n    } else {\r\n        var proto = game.Protobuf.getProtoClassByID(msg.Id);\r\n        if (proto) log.info('NetManager.onMessageIn {} without func', proto.type);\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * 网络连接失败处理\r\n * @param {*message} msg\r\n */\r\nfunction onConnectError(msg) { \r\n    game.EventManager.dispatchEvent('SOCKET_CLOSE');\r\n};\r\n\r\n/**\r\n * 网络连接断开处理\r\n * @param {*message} msg\r\n */\r\nfunction onConnectClosed(msg) {\r\n    log.info(\"timeOut reconnect long_connect\");\r\n    //NetCore.Reconnect();\r\n    game.EventManager.dispatchEvent('SOCKET_CLOSE');\r\n};\r\n\r\n/**\r\n * 网络连接断开处理\r\n * @param {*message} msg\r\n */\r\nfunction onReconnectFailed() {\r\n    cc.log('重连失败了++++'); \r\n    game.EventManager.dispatchEvent('SOCKET_RECONNECTFAILED');\r\n};\r\n\r\n\r\n\r\n\r\nmodule.exports = NetManager;"]}