{"version":3,"sources":["LoadingLayer.js"],"names":["ResLoadManager","require","ViewManager","cc","Class","extends","Component","properties","onLoad","log","info","progressBar","percentLabel","tipLabel","showNetErrorNum","completedCount","lastCompletedCount","start","self","scheduleOnce","loadSceneRes","nextScene","layer","schedule","onDestroy","updatePercent","progress","percent"],"mappings":";;;;;;AAAA;AACA;AACA,IAAMA,iBAAiBC,QAAQ,gBAAR,CAAvB;AACA,IAAMC,cAAcD,QAAQ,aAAR,CAApB;AACA;AACA;;AAEAE,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY,EAHP;;AAML;;AAEAC,UARK,oBAQK;AACNC,YAAIC,IAAJ,CAAS,gCAAT;;AAEA,aAAKC,WAAL,GAAmB,IAAnB;AACA,aAAKC,YAAL,GAAoB,IAApB;AACA,aAAKC,QAAL,GAAgB,IAAhB;AACA,aAAKC,eAAL,GAAuB,CAAvB;AACA,aAAKC,cAAL,GAAuB,CAAvB;AACA,aAAKC,kBAAL,GAA0B,CAA1B;AACH,KAjBI;AAmBLC,SAnBK,mBAmBI;AACL;AACA;;AAEA,YAAIC,OAAO,IAAX;AACA,aAAKC,YAAL,CAAkB,YAAI;AAClB;AACAnB,2BAAeoB,YAAf,CAA4BlB,YAAYmB,SAAxC,EAAmD,EAACC,OAAMJ,IAAP,EAAnD;AACH,SAHD,EAGG,CAHH;AAIA,aAAKK,QAAL,CAAc,YAAI;AACd;AACH,SAFD,EAEE,CAFF;AAGH,KA/BI;AAiCLC,aAjCK,uBAiCQ;AACTf,YAAIC,IAAJ,CAAS,mCAAT;AACA;AACA;AACA;AACA;AACH,KAvCI;;;AAyCL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAe,mBAAe,uBAASC,QAAT,EAAmBC,OAAnB,EAA4B;AACvC;AACA;AACH;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvLK,CAAT","file":"LoadingLayer.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\script\\main\\views\\loading","sourcesContent":["// const ConfigManager = require('ConfigManager');\r\n// const il8n = require('LanguageData');\r\nconst ResLoadManager = require('ResLoadManager');\r\nconst ViewManager = require('ViewManager');\r\n// const Global = require('Global');\r\n// const Alert = require('Alert');\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        log.info('LoadingLayer.onLoad: is called');\r\n\r\n        this.progressBar = null;\r\n        this.percentLabel = null;\r\n        this.tipLabel = null;\r\n        this.showNetErrorNum = 0;\r\n        this.completedCount  = 0;\r\n        this.lastCompletedCount = 0;\r\n    },\r\n\r\n    start () {\r\n        // this.initUI();\r\n        // this.showTip();\r\n        \r\n        let self = this;\r\n        this.scheduleOnce(()=>{\r\n            // 开始加载下一场景资源\r\n            ResLoadManager.loadSceneRes(ViewManager.nextScene, {layer:self});\r\n        }, 0);\r\n        this.schedule(()=>{\r\n            // this.updateNetStatus();\r\n        },3);\r\n    },\r\n    \r\n    onDestroy () {\r\n        log.info('LoadingLayer.onDestroy: is called');\r\n        // game.EventManager.dispatchEvent(Global.eventName.hideAlert, {});\r\n        // this.netStatus && clearTimeout(this.netStatus);\r\n        // this.refreshStatus && clearTimeout(this.refreshStatus);\r\n        // ResLoader.reset();\r\n    },\r\n\r\n    // update (dt) {},\r\n\r\n    // custom functions\r\n\r\n    // initUI: function() {\r\n    //     this.maskNode = this.node.getChildByName('mask');\r\n    //     let vSize = cc.view.getVisibleSize(); \r\n    //     // this.maskNode.setContentSize(vSize.width, vSize.height);\r\n    //     utils.matchBgSize(this.maskNode);\r\n\r\n    //     this.progressBar = this.node.getChildByName('progressBar').getComponent(cc.ProgressBar);\r\n    //     this.progressBar.progress = 0;\r\n\r\n    //     this.percentLabel = this.progressBar.node.getChildByName('percentLabel').getComponent(cc.Label);\r\n    //     this.percentLabel.string = 0;\r\n\r\n    //     this.tipLabel = this.node.getChildByName('tipLabel').getComponent(cc.Label);\r\n    //     this.tipLabel.string = '';\r\n\r\n    //     this.node.getChildByName('tipLabel2').getComponent(cc.Label).string = il8n.t('loding_down');\r\n    //     this.btnRestart = this.node.getChildByName('btnRestart');\r\n    //     this.loadingNum = this.node.getChildByName('loadingNum').getComponent(cc.Label);\r\n\r\n    //     this.dizuo = this.node.getChildByName('dizuo');\r\n    //     this.arrow = this.node.getChildByName('arrow');\r\n    //     this.dizuo.runAction(cc.repeatForever( cc.sequence(cc.scaleTo(0.33,1.2,1.2),cc.scaleTo(0.33,0.9,0.9)) ));\r\n    //     this.arrow.runAction(cc.repeatForever( cc.sequence(cc.moveBy(0.33,cc.v2(0,-11)),cc.moveBy(0.33,cc.v2(0,11))) ));\r\n    \r\n    //     //强制刷新按钮ui\r\n    //     this.refreshIcon = this.node.getChildByName('refreshIcon');\r\n    //     this.gold = this.refreshIcon.getChildByName('gold');\r\n    //     this.eyelight = this.refreshIcon.getChildByName('eyelight');\r\n    //     this.eyeright = this.refreshIcon.getChildByName('eyeright');\r\n    // },\r\n\r\n    // showTip: function() {\r\n    //     let confLoading = [];\r\n    //     let cfg = ConfigManager.dataMap.Loading;\r\n    //     for (let i = 0; i < cfg.length; i++) {\r\n    //         let element = cfg[i];\r\n    //         if(element.Opportunity.split(',').indexOf(Global.opportunity + \"\") != -1){\r\n    //             confLoading.push(element);\r\n    //         }\r\n    //     }\r\n\r\n    //     let tipIndex = Math.floor(Math.random() * (confLoading.length - 1));\r\n    //     let item = confLoading[tipIndex];\r\n    //     if (item && this.tipLabel) {\r\n    //         this.tipLabel.string = item.tip;\r\n    //     }\r\n    // },\r\n\r\n    // // 点击更换一条tip\r\n    // onBtnMask: function(event, eventData) {\r\n    //     this.showTip();\r\n    // },\r\n\r\n    // 更新UI上的显示进度\r\n    // progress - 实际进度（0-1的浮点数）\r\n    // percent - 百分比进度（0-100的整数）\r\n    updatePercent: function(progress, percent) {\r\n        // this.progressBar.progress = progress;\r\n        // this.percentLabel.string = percent;\r\n    },\r\n\r\n    // // 刷新下载文件数量\r\n    // updateCompletedCount : function(count){\r\n    //     this.completedCount = count;\r\n    //     this.isCheckNetStatus = (cc.sys.isBrowser || CC_WECHATGAME) ? true : false;\r\n    //     this.loadingNum.string = 'ceshi测试下载数量：'+count;\r\n    // },\r\n\r\n    // // 刷新网络状态\r\n    // updateNetStatus : function(){\r\n    //     if(this.completedCount == this.lastCompletedCount){\r\n    //         let confGlobalPar = ConfigManager.dataMap.GlobalPar;\r\n    //         let timeArr = confGlobalPar[56].value.split(',');\r\n    //         let time1 = parseInt(timeArr[this.showNetErrorNum]);\r\n    //         let time2 = parseInt(confGlobalPar[57].value);\r\n    //         this.netStatus && clearTimeout(this.netStatus);\r\n    //         this.isCheckNetStatus = false;\r\n    //         this.netStatus = setTimeout(()=>{\r\n    //             this.showNetErrorNum++;\r\n    //             if(this.showNetErrorNum>2){\r\n    //                 this.showNetErrorNum = 2;\r\n    //             }\r\n                \r\n    //             this.netStatus && clearTimeout(this.netStatus);\r\n    //             Alert.show(il8n.t('loadingStopTips'), function () {\r\n    //                 this.updateNetStatus();\r\n    //             }.bind(this), false);\r\n    //         }, time1*1000);\r\n\r\n    //         if(!this.btnRestart.active){\r\n    //             this.refreshStatus && clearTimeout(this.refreshStatus);\r\n    //             this.refreshStatus = setTimeout(()=>{\r\n    //                 this.updateRefreshStatus(true);\r\n    //             }, time2*1000);\r\n    //         }\r\n    //     } else {\r\n    //         game.EventManager.dispatchEvent(Global.eventName.hideAlert, {});\r\n    //         this.netStatus && clearTimeout(this.netStatus);\r\n    //         this.refreshStatus && clearTimeout(this.refreshStatus);\r\n    //         this.updateRefreshStatus(false);\r\n    //     }\r\n    //     this.lastCompletedCount = this.completedCount;\r\n    // },\r\n\r\n    // // 刷新按钮的显示逻辑\r\n    // updateRefreshStatus : function(status){\r\n    //     this.btnRestart.stopAllActions();\r\n    //     this.btnRestart.active = status;\r\n    //     this.refreshIcon.active = status;\r\n    //     // this.btnRestart.runAction(cc.repeatForever( cc.sequence(cc.scaleTo(0.33,1.2,1.2),cc.scaleTo(0.33,0.9,0.9)) ));\r\n    // },\r\n\r\n    // // 弹出网络延迟弹窗\r\n    // onBtnCloseGame : function(){\r\n    //     this.refreshAction();\r\n        \r\n    // },\r\n\r\n    // // 强制按钮逻辑动画\r\n    // refreshAction : function( ) {\r\n        \r\n    //     this.gold.active = true;\r\n    //     this.gold.opacity = 255;\r\n    //     this.gold.runAction(cc.sequence( cc.rotateBy(1, -360),cc.fadeOut(0.1),cc.callFunc(()=>{\r\n    //         Alert.show(il8n.t('loadingStopRefresh'), function () {\r\n    //             if(CC_WECHATGAME){\r\n    //                 wx.exitMiniProgram();\r\n    //             } else if(cc.sys.isBrowser){\r\n    //                 window.location.reload();\r\n    //             }\r\n    //         }.bind(this), true,()=>{\r\n    //             this.netStatus && clearTimeout(this.netStatus);\r\n    //             this.refreshStatus && clearTimeout(this.refreshStatus);\r\n    //             this.isCheckNetStatus = (cc.sys.isBrowser || CC_WECHATGAME) ? true : false;\r\n    //         }, 0, true);\r\n    //     }) ) );\r\n    //     this.eyelight.runAction(cc.rotateBy(1, -360) );\r\n    //     this.eyeright.runAction(cc.rotateBy(1, -360) );\r\n    // },\r\n});\r\n"]}